{"$message_type":"diagnostic","message":"the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>, diesel::sql_types::Nullable<diesel::sql_types::Timestamp>): load_dsl::private::CompatibleType<Album, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1444,"byte_end":1453,"line_start":53,"line_end":53,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        .load::<Album>(&mut conn)","highlight_start":24,"highlight_end":33}],"label":"the trait `load_dsl::private::CompatibleType<Album, _>` is not implemented for `(Integer, Text, Text, Nullable<Text>, Nullable<Timestamp>)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1430,"byte_end":1434,"line_start":53,"line_end":53,"column_start":10,"column_end":14,"is_primary":false,"text":[{"text":"        .load::<Album>(&mut conn)","highlight_start":10,"highlight_end":14}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-4838352375772894360.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is a mismatch between what your query returns and what your type expects the query to return","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the fields in your struct need to match the fields returned by your query in count, order and type","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `#[derive(Selectable)]` or #[derive(QueryableByName)] + `#[diesel(check_for_backend(_))]` \non your struct `Album` and in your query `.select(Album::as_select())` to get a better error message","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:\n  (ST0, ST1)\n  (ST0, ST1, ST2)\n  (ST0, ST1, ST2, ST3)\n  (ST0, ST1, ST2, ST3, ST4)\n  (ST0, ST1, ST2, ST3, ST4, ST5)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)\n  (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, SelectClause<...>>` to implement `LoadQuery<'_, _, Album>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::RunQueryDsl::load`","code":null,"level":"note","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":52968,"byte_end":52972,"line_start":1540,"line_end":1540,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":53054,"byte_end":53080,"line_start":1542,"line_end":1542,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::load`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-11425055100094325801.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>, diesel::sql_types::Nullable<diesel::sql_types::Timestamp>): load_dsl::private::CompatibleType<Album, _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:53:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .load::<Album>(&mut conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `load_dsl::private::CompatibleType<Album, _>` is not implemented for `(Integer, Text, Text, Nullable<Text>, Nullable<Timestamp>)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-4838352375772894360.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this is a mismatch between what your query returns and what your type expects the query to return\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the fields in your struct need to match the fields returned by your query in count, order and type\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `#[derive(Selectable)]` or #[derive(QueryableByName)] + `#[diesel(check_for_backend(_))]` \u001b[0m\n\u001b[0m             on your struct `Album` and in your query `.select(Album::as_select())` to get a better error message\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:\u001b[0m\n\u001b[0m               (ST0, ST1)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)\u001b[0m\n\u001b[0m               (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8)\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, SelectClause<...>>` to implement `LoadQuery<'_, _, Album>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::RunQueryDsl::load`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs:1542:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::load`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-11425055100094325801.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Album: FromSqlRow<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1444,"byte_end":1453,"line_start":53,"line_end":53,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        .load::<Album>(&mut conn)","highlight_start":24,"highlight_end":33}],"label":"the trait `FromSqlRow<_, _>` is not implemented for `Album`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1430,"byte_end":1434,"line_start":53,"line_end":53,"column_start":10,"column_end":14,"is_primary":false,"text":[{"text":"        .load::<Album>(&mut conn)","highlight_start":10,"highlight_end":14}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"double check your type mappings via the documentation of `_`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`diesel::sql_query` requires the loading target to column names for loading values.\nYou need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `FromSqlRow<ST, DB>`:\n  `(T1, T0)` implements `FromSqlRow<(ST1, Untyped), __DB>`\n  `(T1, T2, T0)` implements `FromSqlRow<(ST1, ST2, Untyped), __DB>`\n  `(T1, T2, T3, T0)` implements `FromSqlRow<(ST1, ST2, ST3, Untyped), __DB>`\n  `(T1, T2, T3, T4, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, Untyped), __DB>`\n  `(T1, T2, T3, T4, T5, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, Untyped), __DB>`\n  `(T1, T2, T3, T4, T5, T6, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, Untyped), __DB>`\n  `(T1, T2, T3, T4, T5, T6, T7, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, Untyped), __DB>`\n  `(T1, T2, T3, T4, T5, T6, T7, T8, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, Untyped), __DB>`\nand 23 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, SelectClause<...>>` to implement `LoadQuery<'_, _, Album>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::RunQueryDsl::load`","code":null,"level":"note","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":52968,"byte_end":52972,"line_start":1540,"line_end":1540,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs","byte_start":53054,"byte_end":53080,"line_start":1542,"line_end":1542,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::load`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-11425055100094325801.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Album: FromSqlRow<_, _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:53:24\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .load::<Album>(&mut conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromSqlRow<_, _>` is not implemented for `Album`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: double check your type mappings via the documentation of `_`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `diesel::sql_query` requires the loading target to column names for loading values.\u001b[0m\n\u001b[0m             You need to provide a type that explicitly derives `diesel::deserialize::QueryableByName`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromSqlRow<ST, DB>`:\u001b[0m\n\u001b[0m               `(T1, T0)` implements `FromSqlRow<(ST1, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T0)` implements `FromSqlRow<(ST1, ST2, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T0)` implements `FromSqlRow<(ST1, ST2, ST3, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T4, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T4, T5, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T4, T5, T6, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T4, T5, T6, T7, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, Untyped), __DB>`\u001b[0m\n\u001b[0m               `(T1, T2, T3, T4, T5, T6, T7, T8, T0)` implements `FromSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, Untyped), __DB>`\u001b[0m\n\u001b[0m             and 23 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, SelectClause<...>>` to implement `LoadQuery<'_, _, Album>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::RunQueryDsl::load`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/diesel-2.2.7/src/query_dsl/mod.rs:1542:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::load`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/workspaces/VinylRecorder/record_tracker_backend/target/debug/deps/record_tracker_backend-8ce09dbf251d5ec7.long-type-11425055100094325801.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type `columns::id` cannot be dereferenced","code":{"code":"E0614","explanation":"Attempted to dereference a variable which cannot be dereferenced.\n\nErroneous code example:\n\n```compile_fail,E0614\nlet y = 0u32;\n*y; // error: type `u32` cannot be dereferenced\n```\n\nOnly types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\nExample:\n\n```\nlet y = 0u32;\nlet x = &y;\n// So here, `x` is a `&u32`, so we can dereference it:\n*x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2408,"byte_end":2411,"line_start":88,"line_end":88,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"    diesel::delete(albums.filter(id.eq(*id)))","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0614]\u001b[0m\u001b[0m\u001b[1m: type `columns::id` cannot be dereferenced\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:88:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(albums.filter(id.eq(*id)))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0614.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0614.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
